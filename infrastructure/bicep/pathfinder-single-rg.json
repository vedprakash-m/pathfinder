{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "5727098241496138333"
    }
  },
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "pathfinder",
      "metadata": {
        "description": "Name of the application"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for resources"
      }
    },
    "sqlAdminLogin": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server admin username"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server admin password"
      }
    },
    "openAIApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "OpenAI API key"
      }
    },
    "entraTenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Microsoft Entra External ID tenant ID"
      }
    },
    "entraClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Microsoft Entra External ID client ID (application ID)"
      }
    }
  },
  "variables": {
    "tags": {
      "app": "[parameters('appName')]",
      "architecture": "cost-optimized-single-rg",
      "deploymentType": "solo-developer",
      "managementStrategy": "unified",
      "costOptimization": "enabled"
    },
    "resourceNames": {
      "containerAppsEnv": "[format('{0}-env', parameters('appName'))]",
      "backendApp": "[format('{0}-backend', parameters('appName'))]",
      "frontendApp": "[format('{0}-frontend', parameters('appName'))]",
      "cosmosAccount": "[format('{0}-cosmos-{1}', parameters('appName'), uniqueString(resourceGroup().id))]",
      "sqlServer": "[format('{0}-sql', parameters('appName'))]",
      "sqlDatabase": "[format('{0}-db', parameters('appName'))]",
      "logAnalytics": "[format('{0}-logs', parameters('appName'))]",
      "appInsights": "[format('{0}-insights', parameters('appName'))]",
      "storageAccount": "[format('pf{0}', uniqueString(resourceGroup().id))]",
      "keyVault": "[format('pf-kv-{0}', uniqueString(resourceGroup().id))]",
      "containerRegistry": "pathfinderdevregistry"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', variables('resourceNames').sqlServer, 'AllowAzureServices')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('resourceNames').sqlServer)]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('resourceNames').logAnalytics]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "workspaceCapping": {
          "dailyQuotaGb": 2
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('resourceNames').appInsights]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('resourceNames').logAnalytics)]",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled",
        "SamplingPercentage": 75
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('resourceNames').logAnalytics)]"
      ]
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[variables('resourceNames').containerAppsEnv]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('resourceNames').logAnalytics), '2022-10-01').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('resourceNames').logAnalytics), '2022-10-01').primarySharedKey]"
          }
        },
        "daprAIInstrumentationKey": "[reference(resourceId('Microsoft.Insights/components', variables('resourceNames').appInsights), '2020-02-02').InstrumentationKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('resourceNames').appInsights)]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('resourceNames').logAnalytics)]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2023-05-01-preview",
      "name": "[variables('resourceNames').sqlServer]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
        "version": "12.0",
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', variables('resourceNames').sqlServer, variables('resourceNames').sqlDatabase)]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic",
        "capacity": 5
      },
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 2147483648,
        "zoneRedundant": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('resourceNames').sqlServer)]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[variables('resourceNames').cosmosAccount]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": false,
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 1440,
            "backupRetentionIntervalInHours": 168,
            "backupStorageRedundancy": "Local"
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}', variables('resourceNames').cosmosAccount, 'pathfinder')]",
      "properties": {
        "resource": {
          "id": "pathfinder"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('resourceNames').cosmosAccount)]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('resourceNames').storageAccount]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[variables('resourceNames').containerRegistry]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true,
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[variables('resourceNames').backendApp]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('resourceNames').containerAppsEnv)]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 8000,
            "transport": "http",
            "corsPolicy": {
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            }
          },
          "secrets": [
            {
              "name": "sql-connection-string",
              "value": "[format('Server=tcp:{0}.{1},1433;Initial Catalog={2};Persist Security Info=False;User ID={3};Password={4};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', variables('resourceNames').sqlServer, environment().suffixes.sqlServerHostname, variables('resourceNames').sqlDatabase, parameters('sqlAdminLogin'), parameters('sqlAdminPassword'))]"
            },
            {
              "name": "cosmos-connection-string",
              "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('resourceNames').cosmosAccount), '2023-04-15').connectionStrings[0].connectionString]"
            },
            {
              "name": "openai-api-key",
              "value": "[parameters('openAIApiKey')]"
            },
            {
              "name": "storage-connection-string",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('resourceNames').storageAccount, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('resourceNames').storageAccount), '2023-01-01').keys[0].value)]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "backend",
              "image": "nginx:alpine",
              "resources": {
                "cpu": "[json('0.5')]",
                "memory": "1.0Gi"
              },
              "env": [
                {
                  "name": "DATABASE_URL",
                  "secretRef": "sql-connection-string"
                },
                {
                  "name": "COSMOS_CONNECTION_STRING",
                  "secretRef": "cosmos-connection-string"
                },
                {
                  "name": "OPENAI_API_KEY",
                  "secretRef": "openai-api-key"
                },
                {
                  "name": "AZURE_STORAGE_CONNECTION_STRING",
                  "secretRef": "storage-connection-string"
                },
                {
                  "name": "USE_REDIS_CACHE",
                  "value": "false"
                },
                {
                  "name": "CELERY_BROKER_URL",
                  "value": ""
                },
                {
                  "name": "CELERY_RESULT_BACKEND",
                  "value": ""
                },
                {
                  "name": "ENTRA_EXTERNAL_TENANT_ID",
                  "value": "[parameters('entraTenantId')]"
                },
                {
                  "name": "ENTRA_EXTERNAL_CLIENT_ID",
                  "value": "[parameters('entraClientId')]"
                },
                {
                  "name": "ENTRA_EXTERNAL_AUTHORITY",
                  "value": "[if(not(empty(parameters('entraTenantId'))), format('https://{0}.ciamlogin.com/{1}.onmicrosoft.com', parameters('entraTenantId'), parameters('entraTenantId')), '')]"
                },
                {
                  "name": "ENVIRONMENT",
                  "value": "production"
                },
                {
                  "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                  "value": "[reference(resourceId('Microsoft.Insights/components', variables('resourceNames').appInsights), '2020-02-02').ConnectionString]"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": 0,
            "maxReplicas": 3,
            "rules": [
              {
                "name": "http-scale",
                "http": {
                  "metadata": {
                    "concurrentRequests": "30"
                  }
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('resourceNames').appInsights)]",
        "[resourceId('Microsoft.App/managedEnvironments', variables('resourceNames').containerAppsEnv)]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('resourceNames').cosmosAccount)]",
        "[resourceId('Microsoft.Sql/servers/databases', variables('resourceNames').sqlServer, variables('resourceNames').sqlDatabase)]",
        "[resourceId('Microsoft.Sql/servers', variables('resourceNames').sqlServer)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('resourceNames').storageAccount)]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[variables('resourceNames').frontendApp]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('resourceNames').containerAppsEnv)]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 8080,
            "transport": "http"
          },
          "secrets": [
            {
              "name": "entra-tenant-id",
              "value": "[if(not(empty(parameters('entraTenantId'))), parameters('entraTenantId'), 'test-tenant-id')]"
            },
            {
              "name": "entra-client-id",
              "value": "[if(not(empty(parameters('entraClientId'))), parameters('entraClientId'), 'test-client-id')]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "frontend",
              "image": "nginx:alpine",
              "resources": {
                "cpu": "[json('0.25')]",
                "memory": "0.5Gi"
              },
              "env": [
                {
                  "name": "REACT_APP_API_URL",
                  "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', variables('resourceNames').backendApp), '2023-05-01').configuration.ingress.fqdn)]"
                },
                {
                  "name": "VITE_API_URL",
                  "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', variables('resourceNames').backendApp), '2023-05-01').configuration.ingress.fqdn)]"
                },
                {
                  "name": "VITE_ENTRA_EXTERNAL_TENANT_ID",
                  "secretRef": "entra-tenant-id"
                },
                {
                  "name": "VITE_ENTRA_EXTERNAL_CLIENT_ID",
                  "secretRef": "entra-client-id"
                },
                {
                  "name": "ENVIRONMENT",
                  "value": "production"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": 0,
            "maxReplicas": 2,
            "rules": [
              {
                "name": "http-scale",
                "http": {
                  "metadata": {
                    "concurrentRequests": "50"
                  }
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('resourceNames').backendApp)]",
        "[resourceId('Microsoft.App/managedEnvironments', variables('resourceNames').containerAppsEnv)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[variables('resourceNames').keyVault]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enableRbacAuthorization": true,
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "publicNetworkAccess": "Enabled"
      }
    }
  ],
  "outputs": {
    "backendAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', variables('resourceNames').backendApp), '2023-05-01').configuration.ingress.fqdn)]"
    },
    "frontendAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', variables('resourceNames').frontendApp), '2023-05-01').configuration.ingress.fqdn)]"
    },
    "backendAppName": {
      "type": "string",
      "value": "[variables('resourceNames').backendApp]"
    },
    "frontendAppName": {
      "type": "string",
      "value": "[variables('resourceNames').frontendApp]"
    },
    "sqlServerFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Sql/servers', variables('resourceNames').sqlServer), '2023-05-01-preview').fullyQualifiedDomainName]"
    },
    "cosmosAccountName": {
      "type": "string",
      "value": "[variables('resourceNames').cosmosAccount]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('resourceNames').appInsights), '2020-02-02').InstrumentationKey]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('resourceNames').keyVault]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[variables('resourceNames').containerRegistry]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('resourceNames').containerRegistry), '2023-07-01').loginServer]"
    },
    "costOptimizations": {
      "type": "object",
      "value": {
        "singleResourceGroup": "All resources in pathfinder-rg for simplified management and cost tracking",
        "redisRemoved": "Saves ~$40/month by using in-memory caching",
        "basicSqlTier": "Cost-optimized database tier",
        "serverlessCosmosDb": "Pay-per-use pricing",
        "localRedundancy": "LRS storage for cost savings",
        "optimizedContainerResources": "Right-sized CPU and memory allocation",
        "scaleToZero": "Both apps scale to zero when idle",
        "localBackups": "Local redundancy for Cosmos DB backups",
        "sampledTelemetry": "75% sampling for Application Insights cost control",
        "estimatedMonthlySavings": "$60-80 vs multi-environment setup",
        "bicepOnly": "Bicep-exclusive infrastructure for faster Azure-native deployments"
      }
    }
  }
}