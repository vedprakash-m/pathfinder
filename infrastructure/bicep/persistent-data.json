{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "3275754257440141223"
    }
  },
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "pathfinder",
      "metadata": {
        "description": "Base name for the application"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "metadata": {
        "description": "Environment (dev, prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for resources"
      }
    },
    "sqlAdminLogin": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server admin username"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server admin password"
      }
    }
  },
  "variables": {
    "dataTags": {
      "app": "[parameters('appName')]",
      "environment": "[parameters('environment')]",
      "architecture": "persistent-data-layer",
      "resourceType": "persistent",
      "costOptimization": "enabled",
      "autoDelete": "never",
      "backup": "enabled"
    },
    "dataResourceNames": {
      "sqlServer": "[format('{0}-sql-{1}', parameters('appName'), parameters('environment'))]",
      "sqlDatabase": "[format('{0}-db-{1}', parameters('appName'), parameters('environment'))]",
      "cosmosAccount": "[format('{0}-cosmos-{1}', parameters('appName'), parameters('environment'))]",
      "keyVault": "[format('{0}-db-kv-{1}', parameters('appName'), parameters('environment'))]",
      "storageAccount": "[replace(format('{0}storage{1}', parameters('appName'), parameters('environment')), '-', '')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', variables('dataResourceNames').sqlServer, 'AllowAzureServices')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('dataResourceNames').sqlServer)]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', variables('dataResourceNames').sqlServer, 'AllowAllAzureIPs')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "255.255.255.255"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('dataResourceNames').sqlServer)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[variables('dataResourceNames').keyVault]",
      "location": "[parameters('location')]",
      "tags": "[variables('dataTags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enableRbacAuthorization": true,
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enablePurgeProtection": true,
        "publicNetworkAccess": "Enabled",
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2023-05-01-preview",
      "name": "[variables('dataResourceNames').sqlServer]",
      "location": "[parameters('location')]",
      "tags": "[variables('dataTags')]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
        "version": "12.0",
        "publicNetworkAccess": "Enabled",
        "minimalTlsVersion": "1.2"
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', variables('dataResourceNames').sqlServer, variables('dataResourceNames').sqlDatabase)]",
      "location": "[parameters('location')]",
      "tags": "[variables('dataTags')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic",
        "capacity": 5
      },
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 2147483648,
        "zoneRedundant": false,
        "requestedBackupStorageRedundancy": "Local"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('dataResourceNames').sqlServer)]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[variables('dataResourceNames').cosmosAccount]",
      "location": "[parameters('location')]",
      "tags": "[variables('dataTags')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": false,
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 1440,
            "backupRetentionIntervalInHours": 720,
            "backupStorageRedundancy": "Local"
          }
        },
        "publicNetworkAccess": "Enabled",
        "networkAclBypass": "AzureServices"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}', variables('dataResourceNames').cosmosAccount, 'pathfinder')]",
      "properties": {
        "resource": {
          "id": "pathfinder"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('dataResourceNames').cosmosAccount)]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('dataResourceNames').cosmosAccount, 'pathfinder', 'Itineraries')]",
      "properties": {
        "resource": {
          "id": "Itineraries",
          "partitionKey": {
            "paths": [
              "/tripId"
            ],
            "kind": "Hash"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('dataResourceNames').cosmosAccount, 'pathfinder')]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('dataResourceNames').cosmosAccount, 'pathfinder', 'Messages')]",
      "properties": {
        "resource": {
          "id": "Messages",
          "partitionKey": {
            "paths": [
              "/chatId"
            ],
            "kind": "Hash"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('dataResourceNames').cosmosAccount, 'pathfinder')]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('dataResourceNames').cosmosAccount, 'pathfinder', 'Preferences')]",
      "properties": {
        "resource": {
          "id": "Preferences",
          "partitionKey": {
            "paths": [
              "/userId"
            ],
            "kind": "Hash"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('dataResourceNames').cosmosAccount, 'pathfinder')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('dataResourceNames').storageAccount]",
      "location": "[parameters('location')]",
      "tags": "[variables('dataTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', variables('dataResourceNames').keyVault, 'sql-connection-string')]",
      "properties": {
        "value": "[format('Server=tcp:{0},1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', reference(resourceId('Microsoft.Sql/servers', variables('dataResourceNames').sqlServer), '2023-05-01-preview').fullyQualifiedDomainName, variables('dataResourceNames').sqlDatabase, parameters('sqlAdminLogin'), parameters('sqlAdminPassword'))]",
        "attributes": {
          "enabled": true
        },
        "contentType": "SQL Database Connection String"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('dataResourceNames').keyVault)]",
        "[resourceId('Microsoft.Sql/servers/databases', variables('dataResourceNames').sqlServer, variables('dataResourceNames').sqlDatabase)]",
        "[resourceId('Microsoft.Sql/servers', variables('dataResourceNames').sqlServer)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', variables('dataResourceNames').keyVault, 'cosmos-connection-string')]",
      "properties": {
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('dataResourceNames').cosmosAccount), '2023-04-15').connectionStrings[0].connectionString]",
        "attributes": {
          "enabled": true
        },
        "contentType": "Cosmos DB Connection String"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('dataResourceNames').cosmosAccount)]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('dataResourceNames').keyVault)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', variables('dataResourceNames').keyVault, 'storage-connection-string')]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('dataResourceNames').storageAccount, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('dataResourceNames').storageAccount), '2023-01-01').keys[0].value)]",
        "attributes": {
          "enabled": true
        },
        "contentType": "Storage Account Connection String"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('dataResourceNames').keyVault)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('dataResourceNames').storageAccount)]"
      ]
    }
  ],
  "outputs": {
    "persistentDataLayer": {
      "type": "object",
      "value": {
        "resourceGroupName": "[resourceGroup().name]",
        "sqlServerFqdn": "[reference(resourceId('Microsoft.Sql/servers', variables('dataResourceNames').sqlServer), '2023-05-01-preview').fullyQualifiedDomainName]",
        "sqlServerName": "[variables('dataResourceNames').sqlServer]",
        "sqlDatabaseName": "[variables('dataResourceNames').sqlDatabase]",
        "cosmosAccountName": "[variables('dataResourceNames').cosmosAccount]",
        "cosmosAccountEndpoint": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('dataResourceNames').cosmosAccount), '2023-04-15').documentEndpoint]",
        "storageAccountName": "[variables('dataResourceNames').storageAccount]",
        "dbKeyVaultName": "[variables('dataResourceNames').keyVault]",
        "dbKeyVaultUri": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('dataResourceNames').keyVault), '2023-02-01').vaultUri]"
      }
    },
    "connectionSecrets": {
      "type": "object",
      "value": {
        "sqlConnectionSecretUri": "[format('{0}secrets/sql-connection-string', reference(resourceId('Microsoft.KeyVault/vaults', variables('dataResourceNames').keyVault), '2023-02-01').vaultUri)]",
        "cosmosConnectionSecretUri": "[format('{0}secrets/cosmos-connection-string', reference(resourceId('Microsoft.KeyVault/vaults', variables('dataResourceNames').keyVault), '2023-02-01').vaultUri)]",
        "storageConnectionSecretUri": "[format('{0}secrets/storage-connection-string', reference(resourceId('Microsoft.KeyVault/vaults', variables('dataResourceNames').keyVault), '2023-02-01').vaultUri)]",
        "keyVaultName": "[variables('dataResourceNames').keyVault]"
      }
    },
    "costOptimization": {
      "type": "object",
      "value": {
        "serverlessCosmos": "Cosmos DB in serverless mode - only pay for RU consumed",
        "basicSqlTier": "SQL Basic tier with DTU 5 - lowest cost option",
        "localBackups": "Local backup redundancy for cost savings",
        "storageAccount": "Standard LRS storage for file uploads - minimal cost",
        "noComputeCosts": "No compute resources in this RG - can delete pathfinder-rg safely",
        "estimatedIdleCost": "$20-30/month when pathfinder-rg is deleted (includes storage)",
        "estimatedActiveCost": "$30-40/month when both RGs are active"
      }
    },
    "pauseResumeStrategy": {
      "type": "object",
      "value": {
        "pauseInstructions": "Delete pathfinder-rg to save ~$35-50/month",
        "resumeInstructions": "Run CI/CD pipeline to recreate pathfinder-rg",
        "dataPreservation": "All user data, trips, preferences, and uploaded files remain intact",
        "resumeTime": "5-10 minutes to restore full functionality",
        "costSavings": "Up to 70% savings during pause periods"
      }
    }
  }
}