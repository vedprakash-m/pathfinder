name: Debug CI/CD Issues
# Comprehensive CI/CD debugging workflow based on June 30, 2025 failure analysis

on:
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Debug level (basic, comprehensive, full)'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - basic
          - comprehensive
          - full
      fix_environment:
        description: 'Attempt to fix environment issues'
        required: false
        default: true
        type: boolean

env:
  PYTHONPATH: /home/runner/work/pathfinder/pathfinder/backend
  ENVIRONMENT: testing
  DATABASE_URL: "sqlite+aiosqlite:///:memory:"
  DISABLE_TELEMETRY: "true"

jobs:
  debug-environment:
    name: Debug Environment & Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: System Information
        run: |
          echo "🖥️  System Information"
          echo "===================="
          echo "OS: $(uname -a)"
          echo "Python: $(python --version)"
          echo "Pip: $(pip --version)"
          echo "Working Directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Environment Variables:"
          env | grep -E "(PYTHON|PATH|HOME)" | sort
          
      - name: Check Required Secrets
        run: |
          echo "🔐 Checking GitHub Secrets"
          echo "========================="
          
          # Check for existence (not values for security)
          secrets_to_check=(
            "AZURE_CREDENTIALS"
            "COSMOS_CONNECTION_STRING" 
            "OPENAI_API_KEY"
            "AZURE_CLIENT_ID"
            "AZURE_CLIENT_SECRET"
            "AZURE_TENANT_ID"
          )
          
          missing_secrets=()
          for secret in "${secrets_to_check[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "❌ Missing: $secret"
              missing_secrets+=("$secret")
            else
              echo "✅ Present: $secret"
            fi
          done
          
          if [ ${#missing_secrets[@]} -gt 0 ]; then
            echo "⚠️  Missing ${#missing_secrets[@]} required secrets"
            echo "Please configure these in GitHub repository settings > Secrets and variables > Actions"
          else
            echo "✅ All required secrets are configured"
          fi
          
      - name: Python Dependencies Analysis
        run: |
          cd backend
          echo "📦 Python Dependencies Analysis"
          echo "=============================="
          
          # Install pip-tools for dependency analysis
          pip install pip-tools
          
          # Check for dependency conflicts
          echo "Checking for dependency conflicts..."
          pip check || echo "⚠️  Dependency conflicts detected"
          
          # Show installed packages
          echo -e "\nInstalled packages:"
          pip list
          
          # Show requirements.txt
          echo -e "\nrequirements.txt contents:"
          cat requirements.txt
          
      - name: Install Dependencies with Detailed Logging
        run: |
          cd backend
          echo "🔄 Installing Dependencies"
          echo "========================"
          
          # Upgrade pip first
          python -m pip install --upgrade pip
          
          # Install dependencies with verbose output
          pip install -r requirements.txt -v
          
          # Verify critical packages
          echo -e "\nVerifying critical packages:"
          python -c "
          import sys
          critical_packages = [
              'fastapi', 'uvicorn', 'pydantic', 'sqlalchemy', 
              'azure-cosmos', 'openai', 'pandas', 'numpy'
          ]
          
          for package in critical_packages:
              try:
                  module = __import__(package.replace('-', '_'))
                  version = getattr(module, '__version__', 'Unknown')
                  print(f'✅ {package}: {version}')
              except ImportError as e:
                  print(f'❌ {package}: Import failed - {e}')
              except Exception as e:
                  print(f'⚠️  {package}: {e}')
          "

  debug-imports:
    name: Debug Import Issues
    runs-on: ubuntu-latest
    needs: debug-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Critical Import Validation
        run: |
          cd backend
          echo "🔍 Critical Import Validation"
          echo "============================"
          
          # Test critical modules that caused the original CI/CD failure
          critical_modules=(
            "app.api.feedback"
            "app.api.trips"
            "app.core.dependencies"
            "app.main"
          )
          
          failed_imports=()
          
          for module in "${critical_modules[@]}"; do
            echo -e "\nTesting: $module"
            if python -c "import $module; print('✅ Success')" 2>/dev/null; then
              echo "✅ $module: OK"
            else
              echo "❌ $module: FAILED"
              failed_imports+=("$module")
              
              # Get detailed error
              echo "Detailed error:"
              python -c "import $module" 2>&1 | head -10
            fi
          done
          
          echo -e "\n📊 Import Summary"
          echo "================="
          echo "Total modules tested: ${#critical_modules[@]}"
          echo "Failed imports: ${#failed_imports[@]}"
          
          if [ ${#failed_imports[@]} -gt 0 ]; then
            echo "❌ Failed modules:"
            for module in "${failed_imports[@]}"; do
              echo "  - $module"
            done
            exit 1
          else
            echo "✅ All critical modules imported successfully!"
          fi
          
      - name: Comprehensive Import Scanning
        if: github.event.inputs.debug_level == 'comprehensive' || github.event.inputs.debug_level == 'full'
        run: |
          cd backend
          echo "🔍 Comprehensive Import Scanning"
          echo "==============================="
          
          # Find all Python files
          echo "Scanning all Python files for import issues..."
          find app -name "*.py" -type f | while read -r file; do
            echo "Checking: $file"
            if ! python -m py_compile "$file" 2>/dev/null; then
              echo "❌ Syntax error in: $file"
              python -m py_compile "$file" 2>&1 | head -5
            fi
          done

  debug-tests:
    name: Debug Test Issues  
    runs-on: ubuntu-latest
    needs: debug-imports
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Install testing dependencies
          pip install pytest pytest-asyncio httpx pytest-mock coverage
          
      - name: Test Collection Analysis
        run: |
          cd backend
          echo "🧪 Test Collection Analysis"
          echo "=========================="
          
          # Test collection (this catches import errors in tests)
          echo "Running pytest collection..."
          if python -m pytest tests/ --collect-only -q; then
            echo "✅ Test collection successful"
          else
            echo "❌ Test collection failed"
            echo "Detailed collection errors:"
            python -m pytest tests/ --collect-only -v 2>&1 | head -20
          fi
          
      - name: Individual Test Module Check
        run: |
          cd backend
          echo "🔍 Individual Test Module Check"
          echo "=============================="
          
          # Check each test file individually
          find tests -name "test_*.py" -type f | head -5 | while read -r test_file; do
            echo -e "\nTesting: $test_file"
            if python -m pytest "$test_file" --collect-only -q 2>/dev/null; then
              echo "✅ $test_file: Collection OK"
            else
              echo "❌ $test_file: Collection FAILED"
              python -m pytest "$test_file" --collect-only 2>&1 | head -10
            fi
          done
          
      - name: Run Sample Tests
        if: github.event.inputs.debug_level == 'full'
        run: |
          cd backend
          echo "🧪 Running Sample Tests"
          echo "======================"
          
          # Run a few tests to check execution
          python -m pytest tests/ -k "not e2e and not performance" --maxfail=3 -v

  debug-architecture:
    name: Debug Architecture Issues
    runs-on: ubuntu-latest
    needs: debug-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install import-linter flake8 black mypy isort ruff
          
      - name: Architecture Contract Validation
        run: |
          cd backend
          echo "🏛️  Architecture Contract Validation"
          echo "==================================="
          
          # Run import-linter to check architecture contracts
          if lint-imports --config ../importlinter_contracts/layers.toml; then
            echo "✅ Architecture contracts passed"
          else
            echo "⚠️  Architecture violations detected (non-blocking)"
            lint-imports --config ../importlinter_contracts/layers.toml || true
          fi
          
      - name: Code Quality Checks
        if: github.event.inputs.debug_level == 'full'
        run: |
          cd backend
          echo "📋 Code Quality Checks"
          echo "====================="
          
          # Type checking
          echo "Running mypy..."
          mypy app/ --ignore-missing-imports --explicit-package-bases || echo "⚠️  Type checking issues found"
          
          # Linting
          echo "Running flake8..."
          flake8 . --max-line-length=88 --extend-ignore=E203,W503 --exclude=venv,migrations || echo "⚠️  Linting issues found"
          
          # Code formatting
          echo "Checking code formatting..."
          black --check --diff . || echo "⚠️  Formatting issues found"

  debug-summary:
    name: Debug Summary & Recommendations
    runs-on: ubuntu-latest
    needs: [debug-environment, debug-imports, debug-tests, debug-architecture]
    if: always()
    
    steps:
      - name: Generate Debug Report
        run: |
          echo "📊 CI/CD Debug Summary Report"
          echo "============================"
          echo "Generated: $(date)"
          echo "Debug Level: ${{ github.event.inputs.debug_level }}"
          echo ""
          
          # Check job statuses
          jobs=(
            "debug-environment:${{ needs.debug-environment.result }}"
            "debug-imports:${{ needs.debug-imports.result }}"
            "debug-tests:${{ needs.debug-tests.result }}"
            "debug-architecture:${{ needs.debug-architecture.result }}"
          )
          
          echo "## Job Results:"
          failed_jobs=0
          for job in "${jobs[@]}"; do
            job_name=$(echo "$job" | cut -d: -f1)
            job_status=$(echo "$job" | cut -d: -f2)
            
            if [ "$job_status" = "success" ]; then
              echo "✅ $job_name: PASSED"
            else
              echo "❌ $job_name: $job_status"
              ((failed_jobs++))
            fi
          done
          
          echo ""
          echo "## Recommendations:"
          
          if [ $failed_jobs -eq 0 ]; then
            echo "🎉 All debug checks passed!"
            echo "✅ CI/CD pipeline should work correctly"
          else
            echo "❌ $failed_jobs job(s) failed"
            echo ""
            echo "### Immediate Actions:"
            echo "1. Review failed job logs above"
            echo "2. Fix import errors and missing dependencies"
            echo "3. Ensure all required secrets are configured"
            echo "4. Run local validation: python backend/local_validation.py"
            echo "5. Test fixes with this debug workflow again"
            echo ""
            echo "### Common Issues & Solutions:"
            echo "- Import errors: Check dependencies and Python path"
            echo "- Missing secrets: Configure in GitHub repository settings"
            echo "- Test failures: Run tests locally first"
            echo "- Binary compatibility: Check pandas/numpy versions"
          fi
