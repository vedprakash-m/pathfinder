# Pathfinder CI/CD Pipeline - Enhanced Version
# Phase 2: Advanced features with multi-environment support
name: Pathfinder CI/CD - Enhanced

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  AZURE_LOCATION: eastus
  APP_NAME: pathfinder
  DOCKER_REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  # Job 1: Determine deployment environment and strategy
  setup:
    name: Setup Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env-setup.outputs.environment }}
      deploy: ${{ steps.env-setup.outputs.deploy }}
      resource-group: ${{ steps.env-setup.outputs.resource-group }}
      backend-changes: ${{ steps.changes.outputs.backend }}
      frontend-changes: ${{ steps.changes.outputs.frontend }}
      infrastructure-changes: ${{ steps.changes.outputs.infrastructure }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'llm_orchestration/**'
            frontend:
              - 'frontend/**'
            infrastructure:
              - 'infrastructure/**'

      - name: Setup environment
        id: env-setup
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
            DEPLOY="true"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="prod"
            DEPLOY="true"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENV="staging"
            DEPLOY="true"
          elif [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
            ENV="preview-$(echo ${{ github.ref_name }} | sed 's/feature\///' | tr '/' '-')"
            DEPLOY="true"
          else
            ENV="dev"
            DEPLOY="false"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "deploy=$DEPLOY" >> $GITHUB_OUTPUT
          echo "resource-group=rg-pathfinder-$ENV" >> $GITHUB_OUTPUT
          
          echo "🎯 Environment: $ENV"
          echo "🚀 Deploy: $DEPLOY"

  # Job 2: Security and dependency scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: 'python,javascript'
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 3: Backend quality checks with advanced caching
  backend-quality:
    name: Backend Quality & Testing
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.backend-changes == 'true' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ./backend/.pytest_cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies with retry
        run: |
          python -m pip install --upgrade pip
          for i in {1..3}; do
            pip install -r requirements.txt && break || {
              echo "Attempt $i failed. Retrying..."
              sleep 5
            }
          done
          pip install flake8 black mypy isort pytest-xdist
      
      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          DATABASE_URL=sqlite:///./test.db
          SECRET_KEY=test-secret-key-for-ci
          AUTH0_DOMAIN=test.auth0.com
          AUTH0_AUDIENCE=test-audience
          OPENAI_API_KEY=test-openai-key
          ENVIRONMENT=test
          EOF
      
      - name: Lint with flake8
        run: |
          flake8 . --max-line-length=88 \
            --extend-ignore=E203,W503 \
            --exclude=venv,migrations,alembic \
            --output-file=flake8-report.txt
        continue-on-error: true
      
      - name: Format check with black
        run: |
          black --check --diff . || {
            echo "❌ Code formatting issues found. Run 'black .' to fix."
            exit 1
          }
      
      - name: Import sorting check with isort
        run: |
          isort --check-only --diff . || {
            echo "❌ Import sorting issues found. Run 'isort .' to fix."
            exit 1
          }
      
      - name: Type checking with mypy
        run: |
          mypy app/ --ignore-missing-imports --junit-xml=mypy-report.xml
        continue-on-error: true
      
      - name: Run backend tests with parallel execution
        run: |
          python -m pytest tests/ \
            -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --junit-xml=pytest-report.xml \
            -n auto \
            --maxfail=5
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/pytest-report.xml
            backend/mypy-report.xml
            backend/flake8-report.txt
            backend/htmlcov/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Job 4: Frontend quality checks with advanced caching
  frontend-quality:
    name: Frontend Quality & Testing
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.frontend-changes == 'true' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Cache node modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ./frontend/node_modules
            ./frontend/.next/cache
            ./frontend/dist
          key: ${{ runner.os }}-frontend-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      
      - name: Install dependencies with retry
        run: |
          for i in {1..3}; do
            npm ci && break || {
              echo "Attempt $i failed. Retrying..."
              rm -rf node_modules package-lock.json
              npm install
              sleep 5
            }
          done
      
      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          VITE_API_BASE_URL=http://localhost:8000
          VITE_AUTH0_DOMAIN=test.auth0.com
          VITE_AUTH0_CLIENT_ID=test-client-id
          VITE_AUTH0_AUDIENCE=test-audience
          EOF
      
      - name: Type checking
        run: npm run type-check
      
      - name: Lint with ESLint
        run: |
          npm run lint -- --output-file eslint-report.json --format json
        continue-on-error: true
      
      - name: Run frontend tests
        run: |
          npm run test -- \
            --run \
            --coverage \
            --reporter=junit \
            --outputFile=vitest-report.xml
      
      - name: Build application
        run: npm run build
        env:
          VITE_API_BASE_URL: "https://pathfinder-backend-${{ needs.setup.outputs.environment }}.yellowdune-9b8d769a.eastus.azurecontainerapps.io"
          VITE_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          VITE_AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          VITE_AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 30
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/vitest-report.xml
            frontend/eslint-report.json
            frontend/coverage/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Job 5: Build backend with multi-stage optimization
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [setup, backend-quality, security-scan]
    if: needs.setup.outputs.deploy == 'true' && (needs.setup.outputs.backend-changes == 'true' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_BASE }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.setup.outputs.environment }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ needs.setup.outputs.environment }}

  # Job 6: Build frontend with multi-stage optimization
  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    needs: [setup, frontend-quality, security-scan]
    if: needs.setup.outputs.deploy == 'true' && (needs.setup.outputs.frontend-changes == 'true' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_BASE }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.setup.outputs.environment }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE_URL=https://pathfinder-backend-${{ needs.setup.outputs.environment }}.yellowdune-9b8d769a.eastus.azurecontainerapps.io
            VITE_AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}
            VITE_AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}
            VITE_AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}

  # Job 7: Deploy infrastructure with rollback support
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup, build-backend, build-frontend]
    if: needs.setup.outputs.deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Create/Update Resource Group
        run: |
          az group create \
            --name ${{ needs.setup.outputs.resource-group }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags app=${{ env.APP_NAME }} environment=${{ needs.setup.outputs.environment }} \
              commit=${{ github.sha }} \
              branch=${{ github.ref_name }} \
              deployed-by="github-actions" \
              deployed-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      
      - name: Validate Bicep template
        run: |
          az deployment group validate \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --template-file ./infrastructure/bicep/main.bicep \
            --parameters \
              appName=${{ env.APP_NAME }} \
              environment=${{ needs.setup.outputs.environment }} \
              sqlAdminLogin=${{ secrets.SQL_ADMIN_LOGIN }} \
              sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }} \
              openAIApiKey=${{ secrets.OPENAI_API_KEY }}
      
      - name: Deploy infrastructure with rollback support
        id: deploy-infra
        run: |
          DEPLOYMENT_NAME="pathfinder-infra-$(date +%Y%m%d-%H%M%S)"
          
          az deployment group create \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name "$DEPLOYMENT_NAME" \
            --template-file ./infrastructure/bicep/main.bicep \
            --parameters \
              appName=${{ env.APP_NAME }} \
              environment=${{ needs.setup.outputs.environment }} \
              sqlAdminLogin=${{ secrets.SQL_ADMIN_LOGIN }} \
              sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }} \
              openAIApiKey=${{ secrets.OPENAI_API_KEY }} \
            --output json > deployment-output.json
          
          echo "deployment-name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
          
          # Extract outputs for use in application deployment
          cat deployment-output.json | jq -r '.properties.outputs' > infrastructure-outputs.json
      
      - name: Upload infrastructure outputs
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-outputs
          path: infrastructure-outputs.json

  # Job 8: Deploy applications with blue/green strategy
  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure]
    if: needs.setup.outputs.deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Download infrastructure outputs
        uses: actions/download-artifact@v4
        with:
          name: infrastructure-outputs
      
      - name: Deploy backend with rollback capability
        id: deploy-backend
        run: |
          BACKEND_APP="${{ env.APP_NAME }}-backend-${{ needs.setup.outputs.environment }}"
          
          # Get current revision before deployment for potential rollback
          CURRENT_REVISION=$(az containerapp show \
            --name "$BACKEND_APP" \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --query "properties.latestRevisionName" \
            --output tsv 2>/dev/null || echo "none")
          
          echo "current-backend-revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          
          # Deploy new revision
          az containerapp update \
            --name "$BACKEND_APP" \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_BASE }}/backend:${{ needs.setup.outputs.environment }} \
            --set-env-vars \
              ENVIRONMENT=${{ needs.setup.outputs.environment }} \
              AZURE_COSMOS_ENDPOINT="${{ secrets.AZURE_COSMOS_ENDPOINT }}" \
              AZURE_COSMOS_KEY="${{ secrets.AZURE_COSMOS_KEY }}" \
              SQL_CONNECTION_STRING="${{ secrets.SQL_CONNECTION_STRING }}" \
              OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              AUTH0_DOMAIN="${{ secrets.AUTH0_DOMAIN }}" \
              AUTH0_AUDIENCE="${{ secrets.AUTH0_AUDIENCE }}" \
              COMMIT_SHA="${{ github.sha }}" \
              DEPLOYMENT_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      
      - name: Deploy frontend with rollback capability
        id: deploy-frontend
        run: |
          FRONTEND_APP="${{ env.APP_NAME }}-frontend-${{ needs.setup.outputs.environment }}"
          
          # Get current revision before deployment for potential rollback
          CURRENT_REVISION=$(az containerapp show \
            --name "$FRONTEND_APP" \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --query "properties.latestRevisionName" \
            --output tsv 2>/dev/null || echo "none")
          
          echo "current-frontend-revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          
          # Deploy new revision
          az containerapp update \
            --name "$FRONTEND_APP" \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_BASE }}/frontend:${{ needs.setup.outputs.environment }} \
            --set-env-vars \
              ENVIRONMENT=${{ needs.setup.outputs.environment }} \
              COMMIT_SHA="${{ github.sha }}" \
              DEPLOYMENT_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

  # Job 9: Comprehensive health checks and monitoring
  health-checks:
    name: Health Checks & Monitoring
    runs-on: ubuntu-latest
    needs: [setup, deploy-applications]
    if: needs.setup.outputs.deploy == 'true'
    
    steps:
      - name: Wait for deployment stabilization
        run: |
          echo "⏳ Waiting for applications to stabilize..."
          sleep 60
      
      - name: Comprehensive backend health check
        id: backend-health
        run: |
          BACKEND_URL="https://${{ env.APP_NAME }}-backend-${{ needs.setup.outputs.environment }}.yellowdune-9b8d769a.eastus.azurecontainerapps.io"
          
          echo "🔍 Testing backend endpoints..."
          
          # Health check
          for i in {1..5}; do
            if curl -sf "$BACKEND_URL/health" > /dev/null; then
              echo "✅ Backend health check passed"
              break
            else
              echo "⚠️ Backend health check failed (attempt $i/5)"
              if [[ $i -eq 5 ]]; then
                echo "❌ Backend health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
          
          # API readiness check
          if curl -sf "$BACKEND_URL/api/v1/health" > /dev/null; then
            echo "✅ Backend API is ready"
          else
            echo "⚠️ Backend API not ready"
          fi
      
      - name: Comprehensive frontend health check
        id: frontend-health
        run: |
          FRONTEND_URL="https://${{ env.APP_NAME }}-frontend-${{ needs.setup.outputs.environment }}.yellowdune-9b8d769a.eastus.azurecontainerapps.io"
          
          echo "🔍 Testing frontend..."
          
          for i in {1..5}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" || echo "000")
            if [[ "$RESPONSE" == "200" ]]; then
              echo "✅ Frontend health check passed"
              break
            else
              echo "⚠️ Frontend health check failed (attempt $i/5): HTTP $RESPONSE"
              if [[ $i -eq 5 ]]; then
                echo "❌ Frontend health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
      
      - name: Performance baseline check
        run: |
          BACKEND_URL="https://${{ env.APP_NAME }}-backend-${{ needs.setup.outputs.environment }}.yellowdune-9b8d769a.eastus.azurecontainerapps.io"
          
          echo "🚀 Running performance baseline..."
          
          # Simple response time check
          START_TIME=$(date +%s%N)
          curl -sf "$BACKEND_URL/health" > /dev/null
          END_TIME=$(date +%s%N)
          RESPONSE_TIME=$((($END_TIME - $START_TIME) / 1000000))
          
          echo "📊 Backend response time: ${RESPONSE_TIME}ms"
          
          if [[ $RESPONSE_TIME -gt 5000 ]]; then
            echo "⚠️ Response time exceeds 5s threshold"
          else
            echo "✅ Response time within acceptable range"
          fi

  # Job 10: Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [setup, deploy-applications, health-checks]
    if: ${{ failure() && needs.setup.outputs.deploy == 'true' || github.event.inputs.rollback == 'true' }}
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Rollback backend
        if: needs.deploy-applications.outputs.current-backend-revision != 'none'
        run: |
          echo "🔄 Rolling back backend to previous revision..."
          az containerapp revision activate \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ env.APP_NAME }}-backend-${{ needs.setup.outputs.environment }} \
            --revision ${{ needs.deploy-applications.outputs.current-backend-revision }}
      
      - name: Rollback frontend
        if: needs.deploy-applications.outputs.current-frontend-revision != 'none'
        run: |
          echo "🔄 Rolling back frontend to previous revision..."
          az containerapp revision activate \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ env.APP_NAME }}-frontend-${{ needs.setup.outputs.environment }} \
            --revision ${{ needs.deploy-applications.outputs.current-frontend-revision }}

  # Job 11: Notification and cleanup
  notify:
    name: Notify & Cleanup
    runs-on: ubuntu-latest
    needs: [setup, health-checks, rollback]
    if: always() && needs.setup.outputs.deploy == 'true'
    
    steps:
      - name: Generate deployment summary
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          
          echo "## 🚀 Pathfinder Deployment Summary - $ENV" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`$ENV\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment time**: \`$(date -u +%Y-%m-%dT%H:%M:%SZ)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.health-checks.result }}" == "success" ]]; then
            echo "### ✅ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Application URLs:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🖥️ **Frontend**: https://pathfinder-frontend-$ENV.yellowdune-9b8d769a.eastus.azurecontainerapps.io" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 **Backend**: https://pathfinder-backend-$ENV.yellowdune-9b8d769a.eastus.azurecontainerapps.io" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 **Health**: https://pathfinder-backend-$ENV.yellowdune-9b8d769a.eastus.azurecontainerapps.io/health" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.rollback.result }}" == "success" ]]; then
            echo "### 🔄 Deployment Status: ROLLED BACK" >> $GITHUB_STEP_SUMMARY
            echo "The deployment was automatically rolled back due to health check failures." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "The deployment failed. Please check the logs for more details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Resource Usage" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: \`${{ needs.setup.outputs.resource-group }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: \`${{ env.AZURE_LOCATION }}\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Cleanup preview environments
        if: startsWith(needs.setup.outputs.environment, 'preview-') && github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          echo "🧹 Cleaning up preview environment: ${{ needs.setup.outputs.environment }}"
          # Note: Add preview environment cleanup logic here
          # This would typically involve deleting the resource group
          # az group delete --name ${{ needs.setup.outputs.resource-group }} --yes --no-wait 