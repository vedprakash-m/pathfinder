name: Pause/Resume Environment Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'resume'
        type: choice
        options:
          - resume
          - pause
          - deploy-data-layer
          - status
      
      confirm_pause:
        description: 'Type "CONFIRM" to pause environment (deletes compute layer)'
        required: false
        type: string

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  COMPUTE_RG: pathfinder-rg
  DATA_RG: pathfinder-db-rg
  LOCATION: eastus

jobs:
  pause-resume-manager:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: latest

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ env.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ env.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ env.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ env.AZURE_TENANT_ID }}"
          }

    - name: Deploy Data Layer
      if: github.event.inputs.action == 'deploy-data-layer'
      run: |
        echo "🏗️ Deploying persistent data layer..."
        
        # Create resource group if it doesn't exist
        if ! az group show --name $DATA_RG &> /dev/null; then
          echo "Creating data resource group..."
          az group create --name $DATA_RG --location $LOCATION --tags \
            "app=pathfinder" \
            "type=data-layer" \
            "persistence=true" \
            "autoDelete=never"
        fi
        
        # Deploy data layer
        DEPLOYMENT_NAME="data-layer-$(date +%Y%m%d-%H%M%S)"
        
        az deployment group create \
          --resource-group $DATA_RG \
          --template-file infrastructure/bicep/persistent-data.bicep \
          --parameters \
            appName=pathfinder \
            environment=prod \
            sqlAdminLogin="${{ secrets.SQL_ADMIN_USERNAME }}" \
            sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}" \
            enablePrivateEndpoints=false \
          --name $DEPLOYMENT_NAME
        
        echo "✅ Data layer deployed successfully!"

    - name: Resume Environment
      if: github.event.inputs.action == 'resume'
      run: |
        echo "🚀 Resuming Pathfinder environment..."
        
        # Verify data layer exists
        if ! az group show --name $DATA_RG &> /dev/null; then
          echo "❌ Data layer not found. Deploy it first with 'deploy-data-layer' action."
          exit 1
        fi
        
        # Get data layer resources
        SQL_SERVER_NAME=$(az sql server list --resource-group $DATA_RG --query "[0].name" -o tsv)
        COSMOS_ACCOUNT_NAME=$(az cosmosdb list --resource-group $DATA_RG --query "[0].name" -o tsv)
        STORAGE_ACCOUNT_NAME=$(az storage account list --resource-group $DATA_RG --query "[0].name" -o tsv)
        DATA_KEY_VAULT_NAME=$(az keyvault list --resource-group $DATA_RG --query "[0].name" -o tsv)
        
        echo "Found data layer resources:"
        echo "  SQL Server: $SQL_SERVER_NAME"
        echo "  Cosmos Account: $COSMOS_ACCOUNT_NAME"
        echo "  Storage Account: $STORAGE_ACCOUNT_NAME"
        echo "  Data Key Vault: $DATA_KEY_VAULT_NAME"
        
        # Create compute resource group
        if ! az group show --name $COMPUTE_RG &> /dev/null; then
          echo "Creating compute resource group..."
          az group create --name $COMPUTE_RG --location $LOCATION --tags \
            "app=pathfinder" \
            "type=compute-layer" \
            "dataLayer=$DATA_RG" \
            "resumedAt=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")"
        fi
        
        # Deploy compute layer
        DEPLOYMENT_NAME="compute-layer-$(date +%Y%m%d-%H%M%S)"
        
        az deployment group create \
          --resource-group $COMPUTE_RG \
          --template-file infrastructure/bicep/compute-layer.bicep \
          --parameters \
            appName=pathfinder \
            dataResourceGroup=$DATA_RG \
            sqlServerName=$SQL_SERVER_NAME \
            cosmosAccountName=$COSMOS_ACCOUNT_NAME \
            storageAccountName=$STORAGE_ACCOUNT_NAME \
            dataKeyVaultName=$DATA_KEY_VAULT_NAME \
            sqlAdminLogin="${{ secrets.SQL_ADMIN_USERNAME }}" \
            sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}" \
            openAIApiKey="${{ secrets.OPENAI_API_KEY }}" \
            llmOrchestrationUrl="${{ secrets.LLM_ORCHESTRATION_URL }}" \
            llmOrchestrationApiKey="${{ secrets.LLM_ORCHESTRATION_API_KEY }}" \
          --name $DEPLOYMENT_NAME
        
        # Get outputs
        BACKEND_URL=$(az deployment group show --resource-group $COMPUTE_RG --name $DEPLOYMENT_NAME --query "properties.outputs.backendAppUrl.value" -o tsv)
        FRONTEND_URL=$(az deployment group show --resource-group $COMPUTE_RG --name $DEPLOYMENT_NAME --query "properties.outputs.frontendAppUrl.value" -o tsv)
        
        echo "🎉 Environment resumed successfully!"
        echo "Backend URL: $BACKEND_URL"
        echo "Frontend URL: $FRONTEND_URL"
        echo "Application will be ready in 5-10 minutes"

    - name: Pause Environment
      if: github.event.inputs.action == 'pause'
      run: |
        # Validation check
        if [ "${{ github.event.inputs.confirm_pause }}" != "CONFIRM" ]; then
          echo "❌ To pause the environment, you must type 'CONFIRM' in the confirm_pause field"
          echo "⚠️  This action will delete the compute layer ($COMPUTE_RG) to save costs"
          echo "ℹ️  All data will be preserved in $DATA_RG"
          exit 1
        fi
        
        echo "🛑 Pausing Pathfinder environment..."
        echo "This will delete $COMPUTE_RG while preserving $DATA_RG"
        
        # Verify data layer exists
        if ! az group show --name $DATA_RG &> /dev/null; then
          echo "❌ Data layer not found. Cannot safely pause without data layer."
          exit 1
        fi
        
        # Get current endpoints before deletion
        if az group show --name $COMPUTE_RG &> /dev/null; then
          BACKEND_URL=$(az containerapp show --name pathfinder-backend --resource-group $COMPUTE_RG --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "not-found")
          FRONTEND_URL=$(az containerapp show --name pathfinder-frontend --resource-group $COMPUTE_RG --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "not-found")
          
          echo "Previous endpoints:"
          echo "  Backend: $BACKEND_URL"
          echo "  Frontend: $FRONTEND_URL"
          
          # Delete compute resource group
          echo "Deleting compute resource group: $COMPUTE_RG"
          az group delete --name $COMPUTE_RG --yes --no-wait
          
          # Wait for deletion
          echo "Waiting for deletion to complete..."
          while az group show --name $COMPUTE_RG &> /dev/null; do
            echo -n "."
            sleep 30
          done
          echo ""
          
          echo "✅ Compute layer deleted successfully!"
        else
          echo "ℹ️  Compute resource group not found - may already be paused"
        fi
        
        # Verify data layer integrity
        RESOURCE_COUNT=$(az resource list --resource-group $DATA_RG --query "length(@)")
        echo "✅ Data layer preserved: $RESOURCE_COUNT resources in $DATA_RG"
        
        echo "🎉 Environment paused successfully!"
        echo "💰 Estimated savings: $35-50/month"
        echo "📊 Remaining cost: $15-25/month (data layer only)"
        echo "📋 To resume: Run this workflow with 'resume' action"

    - name: Check Status
      if: github.event.inputs.action == 'status'
      run: |
        echo "📊 Pathfinder Environment Status"
        echo "================================"
        
        # Check data layer
        echo ""
        echo "🗄️ Data Layer ($DATA_RG):"
        if az group show --name $DATA_RG &> /dev/null; then
          RESOURCE_COUNT=$(az resource list --resource-group $DATA_RG --query "length(@)")
          echo "  ✅ Exists with $RESOURCE_COUNT resources"
          
          # Get data layer details
          SQL_SERVER=$(az sql server list --resource-group $DATA_RG --query "[0].name" -o tsv 2>/dev/null || echo "not-found")
          COSMOS_ACCOUNT=$(az cosmosdb list --resource-group $DATA_RG --query "[0].name" -o tsv 2>/dev/null || echo "not-found")
          
          echo "  📊 SQL Server: $SQL_SERVER"
          echo "  📊 Cosmos Account: $COSMOS_ACCOUNT"
        else
          echo "  ❌ Not found - needs to be deployed"
        fi
        
        # Check compute layer
        echo ""
        echo "💻 Compute Layer ($COMPUTE_RG):"
        if az group show --name $COMPUTE_RG &> /dev/null; then
          RESOURCE_COUNT=$(az resource list --resource-group $COMPUTE_RG --query "length(@)")
          echo "  ✅ Active with $RESOURCE_COUNT resources"
          
          # Get app URLs
          BACKEND_URL=$(az containerapp show --name pathfinder-backend --resource-group $COMPUTE_RG --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "not-ready")
          FRONTEND_URL=$(az containerapp show --name pathfinder-frontend --resource-group $COMPUTE_RG --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "not-ready")
          
          if [ "$BACKEND_URL" != "not-ready" ]; then
            echo "  🌐 Backend URL: https://$BACKEND_URL"
            echo "  🌐 Frontend URL: https://$FRONTEND_URL"
          else
            echo "  ⏳ Applications starting up..."
          fi
          
          echo "  💰 Estimated monthly cost: $35-50"
        else
          echo "  ⏸️  Paused (deleted for cost savings)"
          echo "  💰 Current cost: $0 (compute layer)"
        fi
        
        # Overall status
        echo ""
        echo "📋 Overall Status:"
        DATA_EXISTS=$(az group show --name $DATA_RG &> /dev/null && echo "true" || echo "false")
        COMPUTE_EXISTS=$(az group show --name $COMPUTE_RG &> /dev/null && echo "true" || echo "false")
        
        if [ "$DATA_EXISTS" = "true" ] && [ "$COMPUTE_EXISTS" = "true" ]; then
          echo "  🟢 ACTIVE - Full environment running"
          echo "  💰 Total cost: ~$50-75/month"
        elif [ "$DATA_EXISTS" = "true" ] && [ "$COMPUTE_EXISTS" = "false" ]; then
          echo "  🟡 PAUSED - Data preserved, compute deleted"
          echo "  💰 Total cost: ~$15-25/month"
        elif [ "$DATA_EXISTS" = "false" ]; then
          echo "  🔴 NOT DEPLOYED - Data layer missing"
          echo "  💰 Total cost: $0/month"
        fi
        
        echo ""
        echo "Available actions:"
        if [ "$DATA_EXISTS" = "false" ]; then
          echo "  1. deploy-data-layer - Deploy persistent data layer"
        fi
        if [ "$DATA_EXISTS" = "true" ] && [ "$COMPUTE_EXISTS" = "false" ]; then
          echo "  1. resume - Restore compute layer"
        fi
        if [ "$COMPUTE_EXISTS" = "true" ]; then
          echo "  1. pause - Delete compute layer (saves $35-50/month)"
        fi

    - name: Summary
      if: always()
      run: |
        echo ""
        echo "🔄 Pause/Resume Architecture Summary"
        echo "===================================="
        echo "• Data Layer (pathfinder-db-rg): Persistent, never delete"
        echo "• Compute Layer (pathfinder-rg): Ephemeral, safe to delete"
        echo "• Pause saves $35-50/month by deleting compute layer"
        echo "• Resume restores full functionality in 5-10 minutes"
        echo "• All user data and trip information is always preserved"
