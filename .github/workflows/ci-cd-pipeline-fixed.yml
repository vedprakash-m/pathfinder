name: Enhanced Production Pipeline

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            infrastructure:
              - 'infrastructure/**'

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  test-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v

  test-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test

  build-backend:
    needs: [test-backend, security-scan]
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest

  build-frontend:
    needs: [test-frontend, security-scan]
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest

  deploy-infrastructure:
    needs: [security-scan]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy Infrastructure
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./infrastructure/bicep/main.bicep
          parameters: |
            appName=pathfinder
            environment=prod
            sqlAdminLogin=${{ secrets.SQL_ADMIN_LOGIN }}
            sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
            openAIApiKey=${{ secrets.OPENAI_API_KEY }}

  deploy-backend:
    needs: [deploy-infrastructure]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy Backend
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          containerAppName: pathfinder-backend-prod
          resourceGroup: ${{ secrets.AZURE_RG }}
          imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest

  deploy-frontend:
    needs: [deploy-backend]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy Frontend
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          containerAppName: pathfinder-frontend-prod
          resourceGroup: ${{ secrets.AZURE_RG }}
          imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest

  performance-test:
    needs: [deploy-frontend]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Locust
        run: pip install locust
      - name: Run performance tests
        run: |
          mkdir -p tests/load
          cat > tests/load/locustfile.py << 'EOF'
          from locust import HttpUser, task, between
          
          class PathfinderUser(HttpUser):
              wait_time = between(1, 5)
              
              @task(3)
              def view_trips(self):
                  self.client.get("/api/v1/trips")
              
              @task(2)
              def view_families(self):
                  self.client.get("/api/v1/families")
              
              @task(1)
              def health_check(self):
                  self.client.get("/health")
          EOF
          
          locust -f tests/load/locustfile.py --headless -u 50 -r 10 -t 3m --host https://pathfinder-backend.yellowdune-9b8d769a.eastus.azurecontainerapps.io

  notify-completion:
    needs: [performance-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.performance-test.result }}" == "success" ]]; then
            echo "✅ Phase 1 deployment completed successfully!"
          else
            echo "❌ Phase 1 deployment failed. Check logs for details."
          fi
