version: '3.8'

# Docker Compose configuration for comprehensive local testing
# Usage: docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit

services:
  # Test database
  test-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pathfinder_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Redis
  test-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend API for testing
  test-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_password@test-db:5432/pathfinder_test
      - REDIS_URL=redis://test-redis:6379
      - ENVIRONMENT=testing
      - ENTRA_EXTERNAL_TENANT_ID=test-tenant-id
      - ENTRA_EXTERNAL_CLIENT_ID=test-client-id
      - ENTRA_EXTERNAL_AUTHORITY=https://test-tenant-id.ciamlogin.com/test-tenant-id.onmicrosoft.com
      - OPENAI_API_KEY=sk-test-key-for-testing
      - GOOGLE_MAPS_API_KEY=test-maps-key
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  # Frontend for testing (optional)
  test-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    depends_on:
      test-api:
        condition: service_healthy
    environment:
      - VITE_API_URL=http://test-api:8000/api/v1

  # Comprehensive test runner
  test-runner:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_password@test-db:5432/pathfinder_test
      - REDIS_URL=redis://test-redis:6379
      - ENVIRONMENT=testing
      - VITE_ENTRA_EXTERNAL_TENANT_ID=test-tenant-id
      - VITE_ENTRA_EXTERNAL_CLIENT_ID=test-client-id
      - OPENAI_API_KEY=sk-test-key-for-testing
      - API_BASE_URL=http://test-api:8000
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      test-api:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üß™ Running comprehensive test suite...' &&
        echo 'üìã Unit Tests:' &&
        python -m pytest tests/ -m 'unit or not (e2e or performance)' -v --tb=short &&
        echo 'üîó Integration Tests:' &&
        python -m pytest tests/ -m 'integration' -v --tb=short &&
        echo 'üé≠ E2E Tests:' &&
        python -m pytest tests/ -m 'e2e' -v --tb=short --maxfail=3 &&
        echo '‚ö° Performance Tests:' &&
        python -m pytest tests/ -m 'performance' -v --tb=short &&
        echo 'üìä Coverage Report:' &&
        coverage run -m pytest tests/ &&
        coverage report &&
        echo '‚úÖ All tests completed successfully!'
      "

  # API endpoint testing with real HTTP calls
  api-tester:
    image: curlimages/curl:latest
    depends_on:
      test-api:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üåê Testing API endpoints with real HTTP calls...' &&
        echo 'Testing health endpoint:' &&
        curl -f http://test-api:8000/health &&
        echo 'Testing authentication (should return 401):' &&
        curl -f -w 'HTTP Status: %{http_code}\n' http://test-api:8000/api/v1/trips/ || true &&
        echo 'Testing CORS headers:' &&
        curl -I -X OPTIONS http://test-api:8000/api/v1/trips/ &&
        echo 'Testing API documentation:' &&
        curl -f http://test-api:8000/docs &&
        echo '‚úÖ API endpoint tests completed!'
      "

networks:
  default:
    name: pathfinder-test-network
